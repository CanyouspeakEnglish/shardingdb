package com.p4.bank.mybatisconfig;

import com.p4.bank.utilnew.MybatisSubmeterUtils;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.ArrayUtils;
import org.apache.ibatis.mapping.*;
import org.springframework.util.CollectionUtils;
import org.springframework.util.ObjectUtils;

import java.lang.reflect.Field;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * @author lzx
 * mappedStatement包装类
 */
@Slf4j
public class MappedStatementWraper {

    private MappedStatement mappedStatement;

    private BoundSql boundSql;

    private String sql;

    public MappedStatementWraper(MappedStatement mappedStatement, BoundSql boundSql, String sql) {
        this.mappedStatement = mappedStatement;
        this.boundSql = boundSql;
        this.sql = sql;
    }

    public class BoundSqlSqlSource implements SqlSource {
        private BoundSql boundSql;
        public BoundSqlSqlSource(BoundSql boundSql) {
            this.boundSql = boundSql;
        }
        @Override
        public BoundSql getBoundSql(Object parameterObject) {
            return boundSql;
        }
    }

    /**
     * 包装
     * @return
     */
    public MappedStatement wraper(){
        this.encryption();
        BoundSql newBoundSql = new BoundSql(mappedStatement.getConfiguration(), sql,
                boundSql.getParameterMappings(), boundSql.getParameterObject());
        MappedStatement newMs = this.copyFromMappedStatement(mappedStatement, new BoundSqlSqlSource(newBoundSql));
        this.handle(newBoundSql);
        return newMs;
    }

    /**
     * 数据交换
     * @param ms
     * @param newSqlSource
     * @return
     */
    private MappedStatement copyFromMappedStatement(MappedStatement ms, SqlSource newSqlSource) {
        MappedStatement.Builder builder = new MappedStatement.Builder(ms.getConfiguration(), ms.getId(), newSqlSource, ms.getSqlCommandType());
        builder.resource(ms.getResource());
        builder.fetchSize(ms.getFetchSize());
        builder.statementType(ms.getStatementType());
        builder.keyGenerator(ms.getKeyGenerator());
        if (ms.getKeyProperties() != null && ms.getKeyProperties().length > 0) {
            builder.keyProperty(ms.getKeyProperties()[0]);
        }
        builder.timeout(ms.getTimeout());
        builder.parameterMap(ms.getParameterMap());
        builder.resultMaps(ms.getResultMaps());
        builder.resultSetType(ms.getResultSetType());
        builder.cache(ms.getCache());
        builder.flushCacheRequired(ms.isFlushCacheRequired());
        builder.useCache(ms.isUseCache());
        return builder.build();
    }

    private void handle(BoundSql newBoundSql){
        for (ParameterMapping mapping : boundSql.getParameterMappings()) {
            String prop = mapping.getProperty();
            if (boundSql.hasAdditionalParameter(prop)) {
                newBoundSql.setAdditionalParameter(prop, boundSql.getAdditionalParameter(prop));
            }
        }
    }

    /**
     * 对应字段进行入库前加密
     * 执行前只是针对于insert 和 update
     */
    private void encryption(){
        if(mappedStatement.getSqlCommandType() == SqlCommandType.INSERT ||
                mappedStatement.getSqlCommandType() == SqlCommandType.UPDATE||
                mappedStatement.getSqlCommandType() == SqlCommandType.SELECT){
            Set<String> encryptionField = MybatisSubmeterUtils.getEncryptionFields();
            Object parameterObject = boundSql.getParameterObject();
            if(parameterObject instanceof Collection){
                encryptionCollection(encryptionField, parameterObject);
                return;
            }
            if(parameterObject.getClass().isArray()){
                encryptionArray(encryptionField, parameterObject);
                return;
            }
            if(parameterObject instanceof Object){
                encryptionObject(encryptionField, parameterObject);
                return;
            }
        }
    }

    private void encryptionArray(Set<String> encryptionField, Object parameterObject) {
        Object[] array = (Object[]) parameterObject;
        if(ArrayUtils.isNotEmpty(array)){
            for (Object parameterObjects : array) {
                encryptionObject(encryptionField,parameterObjects);
            }
        }
    }

    private void encryptionCollection(Set<String> encryptionField, Object parameterObject) {
        Collection collection = (Collection) parameterObject;
        if(!CollectionUtils.isEmpty(collection)){
            for (Object parameterObjects : collection) {
                encryptionObject(encryptionField,parameterObjects);
            }
        }
    }

    private void encryptionObject(Set<String> encryptionField, Object parameterObject) {
        if(parameterObject instanceof Map){
            encryptionMap(encryptionField, (Map) parameterObject);
        }else {
            doEncryptionObject(encryptionField, parameterObject);
        }
    }

    private void doEncryptionObject(Set<String> encryptionField, Object parameterObject) {

        Class param = parameterObject.getClass();
        List objectAttributeNames = DataDecryptionProcess.getObjectAttributeNames(param);
        for (String field : encryptionField) {
            if(!objectAttributeNames.contains(field)){
                continue;
            }
            Field fieldValue = null;
            try {
                fieldValue = param.getDeclaredField(field);
                fieldValue.setAccessible(true);
                Object value = fieldValue.get(parameterObject);
                if(!ObjectUtils.isEmpty(value)){
                    EncryptionHandle encryptionHandle = MybatisSubmeterUtils.getEncryptionHandle(field);
                    String encryption = encryptionHandle.encryption(String.valueOf(value));
                    fieldValue.set(parameterObject, encryption);
                }
            } catch (Exception e) {
                log.error("encryption parameterObject error={}",e);
            }
        }
    }

    private void encryptionMap(Set<String> encryptionField, Map parameterObject) {
        Map<String,Object> parameterMap = parameterObject;
        if(parameterMap == null){
            throw new IllegalArgumentException("parameterMap is null");
        }
        for (String field : encryptionField) {
            Object value = parameterMap.get(field);
            if(!ObjectUtils.isEmpty(value)){
                EncryptionHandle encryptionHandle = MybatisSubmeterUtils.getEncryptionHandle(field);
                String encryption = null;
                try {
                    encryption = encryptionHandle.encryption(String.valueOf(value));
                    parameterMap.put(field,encryption);
                } catch (Exception e) {
                    log.error("encryption parameterMap error={}",e);
                }
            }
        }
    }
}
